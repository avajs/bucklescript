console.log([
  ['test', 'testInterface'],
  ['test.after', 'afterInterface'],
  ['test.after.always', 'afterInterface'],
  ['test.after.always.cb', 'hookCbInterface'],
  ['test.after.always.cb.skip', 'hookCbSkipInterface'],
  ['test.after.always.skip', 'hookSkipInterface'],
  ['test.after.cb', 'hookCbInterface'],
  ['test.after.cb.skip', 'hookCbSkipInterface'],
  ['test.after.skip', 'hookSkipInterface'],

  ['test.after.each', 'afterInterface'],
  ['test.after.each.always', 'afterInterface'],
  ['test.after.each.always.cb', 'hookCbInterface'],
  ['test.after.each.always.cb.skip', 'hookCbSkipInterface'],
  ['test.after.each.always.skip', 'hookSkipInterface'],
  ['test.after.each.cb', 'hookCbInterface'],
  ['test.after.each.cb.skip', 'hookCbSkipInterface'],
  ['test.after.each.skip', 'hookSkipInterface'],


  ['test.before', 'beforeInterface'],
  ['test.before.always', 'beforeInterface'],
  ['test.before.always.cb', 'hookCbInterface'],
  ['test.before.always.cb.skip', 'hookCbSkipInterface'],
  ['test.before.always.skip', 'hookSkipInterface'],
  ['test.before.cb', 'hookCbInterface'],
  ['test.before.cb.skip', 'hookCbSkipInterface'],
  ['test.before.skip', 'hookSkipInterface'],
  ['test.before.each', 'beforeInterface'],
  ['test.before.each.always', 'beforeInterface'],
  ['test.before.each.always.cb', 'hookCbInterface'],
  ['test.before.each.always.cb.skip', 'hookCbSkipInterface'],
  ['test.before.each.always.skip', 'hookSkipInterface'],
  ['test.before.each.cb', 'hookCbInterface'],
  ['test.before.each.cb.skip', 'hookCbSkipInterface'],
  ['test.before.each.skip', 'hookSkipInterface'],


  ['test.cb', 'cbInterface'],
  ['test.cb.failing', 'cbFailingInterface'],
  ['test.cb.failing.only', 'cbOnlyInterface'],
  ['test.cb.failing.skip', 'cbSkipInterface'],
  ['test.cb.only', 'cbOnlyInterface'],
  ['test.cb.skip', 'cbSkipInterface'],

  ['test.failing', 'failingInterface'],
  ['test.failing.only', 'onlyInterface'],
  ['test.failing.skip', 'skipInterface'],
  ['test.serial', 'serialInterface'],
  ['test.serial.after', 'afterInterface'],
  ['test.serial.after.always', 'afterInterface'],
  ['test.serial.after.always.cb', 'hookCbInterface'],
  ['test.serial.after.always.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.after.always.skip', 'hookSkipInterface'],
  ['test.serial.after.cb', 'hookCbInterface'],
  ['test.serial.after.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.after.skip', 'hookSkipInterface'],
  ['test.serial.after.each', 'afterInterface'],
  ['test.serial.after.each.always', 'afterInterface'],
  ['test.serial.after.each.always.cb', 'hookCbInterface'],
  ['test.serial.after.each.always.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.after.each.always.skip', 'hookSkipInterface'],
  ['test.serial.after.each.cb', 'hookCbInterface'],
  ['test.serial.after.each.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.after.each.skip', 'hookSkipInterface'],
  ['test.serial.before', 'afterInterface'],
  ['test.serial.before.always', 'afterInterface'],
  ['test.serial.before.always.cb', 'hookCbInterface'],
  ['test.serial.before.always.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.before.always.skip', 'hookSkipInterface'],
  ['test.serial.before.cb', 'hookCbInterface'],
  ['test.serial.before.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.before.skip', 'hookSkipInterface'],
  ['test.serial.before.each', 'afterInterface'],
  ['test.serial.before.each.always', 'afterInterface'],
  ['test.serial.before.each.always.cb', 'hookCbInterface'],
  ['test.serial.before.each.always.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.before.each.always.skip', 'hookSkipInterface'],
  ['test.serial.before.each.cb', 'hookCbInterface'],
  ['test.serial.before.each.cb.skip', 'hookCbSkipInterface'],
  ['test.serial.before.each.skip', 'hookSkipInterface'],
  ['test.serial.cb', 'cbInterface'],
  ['test.serial.cb.failing', 'cbFailingInterface'],
  ['test.serial.cb.failing.only', 'cbOnlyInterface'],
  ['test.serial.cb.failing.skip', 'cbSkipInterface'],
  ['test.serial.cb.only', 'cbOnlyInterface'],
  ['test.serial.cb.skip', 'cbSkipInterface'],
  ['test.serial.failing', 'failingInterface'],
  ['test.serial.failing.only', 'onlyInterface'],
  ['test.serial.failing.skip', 'skipInterface'],
  ['test.serial.only', 'onlyInterface'],
  ['test.serial.skip', 'skipInterface'],
  ['test.serial.todo', 'todoDeclaration'],
  ['test.only', 'onlyInterface'],
  ['test.skip', 'skipInterface'],
  ['test.todo', 'todoDeclaration']
].map(([path, interface]) => {
  const [externalValue, ...reversedScopes] = path.split('.').reverse();
  const scopes = reversedScopes.reverse();

  return `
[@bs.module "ava"] ${scopes.map(scope => `[@bs.scope "${scope}"]`).join(' ')}
external _${path.split('.').join('_')} : ${interface} = "${externalValue}";
let ${path.split('.').join('_')} = _${path.split('.').join('_')};
  `

}).join(''));
